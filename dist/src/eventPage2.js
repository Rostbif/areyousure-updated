/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/eventPage2.ts":
/*!***************************!*\
  !*** ./src/eventPage2.ts ***!
  \***************************/
/***/ (function() {


// Generated by CoffeeScript 1.12.5
// @ts-nocheck
(function () {
    // initialize variables
    const DEFAULT_SITES = [
        {
            hostSuffix: "reddit.com",
            useDefaultExplanation: true,
            explanation: "Productivity",
        },
        {
            hostSuffix: "news.ycombinator.com",
            useDefaultExplanation: true,
            explanation: "Productivity",
        },
        {
            hostSuffix: "facebook.com",
            useDefaultExplanation: true,
            explanation: "Productivity",
        },
        {
            hostSuffix: "twitter.com",
            useDefaultExplanation: true,
            explanation: "Productivity",
        },
        {
            hostSuffix: "mako.co.il",
            useDefaultExplanation: true,
            explanation: "Productivity",
        },
        {
            hostSuffix: "ynet.co.il",
            useDefaultExplanation: true,
            explanation: "Productivity",
        },
    ], urlRegex = /^(([^:\/?#]+):)?(\/\/([^\/:?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
    let storage = chrome.storage.sync, cooldown = 5, fullSites = DEFAULT_SITES;
    let filter = {
        url: DEFAULT_SITES.map((site) => ({ hostSuffix: site.hostSuffix })),
    };
    /* The listener is where most of the action happens. This code fires on page navigate and is where we inject the content script.
       At this point filtering has already happened so we must be on one of the sites in our filter list. */
    let listener = function (event) {
        // Here we check that we are on the main frame, and not in some kind of an iframe.
        if (event.frameId > 0) {
            return;
        }
        let contentScriptExecuting = chrome.tabs.executeScript(event.tabId, {
            file: "src/content2.js",
            runAt: "document_start",
        });
        let currentTabUrlBroken = urlRegex.exec(event.url);
        let domain = currentTabUrlBroken != null ? currentTabUrlBroken[4] : undefined;
        // if we couldn't find the domain then we stop running the function.
        if (!domain) {
            console.log("No domain found");
            return;
        }
        // find the current site object
        let theCurrentSiteObject = fullSites.find((site) => domain.match(new RegExp(site.hostSuffix + "$")));
        let explanation = theCurrentSiteObject.explanation;
        chrome.tabs.sendMessage(event.tabId, { explanation: explanation });
        return contentScriptExecuting;
    };
    let tabReplacedListener = function (event) {
        return chrome.tabs.get(event.tabId, function (tab) {
            let currentTabUrlBroken = urlRegex.exec(tab.url);
            let domain = currentTabUrlBroken != null ? currentTabUrlBroken[4] : undefined;
            // if we couldn't find the domain then we stop running the function.
            if (!domain) {
                return;
            }
            let sitesToPopupOn = filter.url;
            for (let i = 0; i < sitesToPopupOn.length; i++) {
                let siteToPopupOn = sitesToPopupOn[i];
                if (domain.match(new RegExp(siteToPopupOn.hostSuffix + "$"))) {
                    return listener(event);
                }
            }
        });
    };
    let msgListener = function (msg) {
        if (msg !== "clicked") {
            return;
        }
        // if we got the clicked message then we stop to listen, so no more dialog will appear
        unlisten();
        // and we set an alarm to turn it back on again after the cooldown time.
        return chrome.alarms.create({
            delayInMinutes: cooldown,
        });
    };
    // listen to events
    let listen = function () {
        chrome.alarms.clearAll();
        // this will trigger the listener function only if the commited URL is one of the list inside the filter
        chrome.webNavigation.onCommitted.addListener(listener, filter);
        chrome.webNavigation.onTabReplaced.addListener(tabReplacedListener);
        // listen to messages from the content.js
        return chrome.runtime.onMessage.addListener(msgListener);
    };
    // listen to events (when we already presented our dialog...)
    let unlisten = function () {
        chrome.webNavigation.onCommitted.removeListener(listener);
        chrome.webNavigation.onTabReplaced.removeListener(tabReplacedListener);
        return chrome.runtime.onMessage.removeListener(msgListener);
    };
    // triggered when on chrome.storage.onChanged (when the storage is changed, meaning the customer changed his preferences)
    let reload = function () {
        return storage.get(["sites", "cooldown"], function (result) {
            if (!result) {
                return;
            }
            if (Array.isArray(result.sites)) {
                fullSites = result.sites;
                filter = {
                    url: result.sites.map((site) => ({
                        hostSuffix: site.hostSuffix,
                    })),
                };
            }
            if (result.cooldown) {
                cooldown = result.cooldown;
            }
            unlisten();
            return listen();
        });
    };
    storage.get(["sites", "cooldown"], function (result) {
        if (!result) {
            return;
        }
        // if we have results for the sites, we should assign them to the filter.
        //if not we should push the default values to the storage
        if (Array.isArray(result.sites)) {
            fullSites = result.sites;
            filter = {
                url: result.sites.map((site) => ({
                    hostSuffix: site.hostSuffix,
                })),
            };
        }
        else {
            storage.set({
                sites: DEFAULT_SITES,
            });
        }
        // Same for cooldown
        if (result.cooldown) {
            cooldown = result.cooldown;
        }
        else {
            storage.set({
                cooldown: 5,
            });
        }
        return chrome.alarms.get(function (alarm) {
            if (!alarm) {
                return listen();
            }
        });
    });
    // Only start listening if we haven't deliberately removed our listeners (because we're waiting for the alarm to turn them back on).
    chrome.alarms.onAlarm.addListener(listen);
    chrome.storage.onChanged.addListener(reload);
}).call(this);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/eventPage2.ts"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,