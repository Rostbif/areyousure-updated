//import utilitis from "utilitis";

//const utilities = require("utilities");

// Generated by CoffeeScript 1.12.5
(function () {
  let catchError = function (f) {
    return function () {
      if (chrome.runtime.lastError) {
        return alert(chrome.runtime.lastError.string);
      } else if (f) {
        return f.apply(this, arguments);
      }
    };
  };

  let $ = document.querySelector.bind(document);
  let storage = chrome.storage.sync;
  syncWithStorage();

  $("#holdTime").addEventListener("input", function () {
    return storage.set(
      {
        holdTime: parseFloat($("#holdTime").value),
      },
      catchError()
    );
  });

  $("#cooldown").addEventListener("input", function () {
    return storage.set(
      {
        cooldown: parseFloat($("#cooldown").value),
      },
      catchError()
    );
  });

  $("#dimming").addEventListener("input", function () {
    return storage.set(
      {
        backdropOpacity: parseFloat($("#dimming").value) / 100,
      },
      catchError()
    );
  });

  $("#explanation").addEventListener("input", function () {
    return storage.set(
      {
        explanation: $("#explanation").value,
      },
      catchError()
    );
  });

  // functions area

  function syncWithStorage() {
    storage.get(
      {
        sites: [],
        holdTime: 2,
        cooldown: 5,
        backdropOpacity: 0.8,
        explanation: "Default",
      },
      catchError(function (args) {
        let sites = args.sites;

        // Set the sites text area with the sites from the storage
        $("#sites").value = (function () {
          let site;
          let results = [];
          for (let i = 0; i < sites.length; i++) {
            site = sites[i];
            results.push(site.hostSuffix);
          }

          return results;
        })().join("\n");

        // Create the site containers
        for (let i = 0; i < sites.length; i++) {
          addSiteContainer(sites, i, "exist");
        }

        $("#addSite").addEventListener("click", (e) => {
          addSiteContainer(sites, sites.length, "new");
        });

        // Set the other input elements with the values from the storage
        $("#holdTime").value = args.holdTime;
        $("#cooldown").value = args.cooldown;
        $("#explanation").value = args.explanation;

        return ($("#dimming").value = Math.round(args.backdropOpacity * 100));
      })
    );

    $("#sites").addEventListener("input", function () {
      let site;

      let sites = (function () {
        var ref, results;
        ref = $("#sites").value.split("\n");
        results = [];
        for (let i = 0; i < ref.length; i++) {
          site = ref[i];
          if (site) {
            results.push({
              hostSuffix: site,
            });
          }
        }
        return results;
      })();

      return storage.set(
        {
          sites: sites,
        },
        catchError()
      );
    });
  }

  function addSiteContainer(sites, i, existOrNew) {
    let siteContainer = document.createElement("div");
    siteContainer.classList.add("siteContainer");

    let siteInput = document.createElement("input");
    siteInput.setAttribute("type", "text");

    let defExpCheckBox = document.createElement("input");
    setMultipleAttributes(defExpCheckBox, {
      type: "checkbox",
      id: "defExpCheckBox",
      name: "defExpCheckBox",
      value: "User default explanation?",
    });

    defExpCheckBox.addEventListener("change", function (e) {
      // Todo: we should update the value only when the user clicks apply...
      // sites[i].useDefaultExplanation = e.target.checked;
      // storage.set(
      //   {
      //     sites: sites,
      //   },
      //   catchError()
      // );
    });

    let button;

    if (existOrNew === "exist") {
      // set the values according to storage
      siteInput.setAttribute("value", sites[i].hostSuffix);
      defExpCheckBox.checked = sites[i].useDefaultExplanation;
      defExpCheckBox.disabled = true;

      button = createDeleteButton();
      button.addEventListener("click", function (b) {
        // remove the site from the storage
        sites.splice(i, 1);
        storage.set(
          {
            sites: sites,
          },
          catchError()
        );

        // delete the parent element of the button, which is the div.siteContainer
        //deleteButton.parentElement.remove();
        b.target.parentElement.remove();
      });
    } else if (existOrNew === "new") {
      // use default values
      defExpCheckBox.checked = true;

      button = createAddButton();
      button.addEventListener("click", function (b) {
        // remove the site from the storage
        let site = b.target.parentElement.querySelector("input").value;
        let checkbox = b.target.parentElement.querySelector(
          "input[type=checkbox]"
        );
        // I'm here (when we save we need to get also the checkbox value...)
        sites.push({
          hostSuffix: site,
          useDefaultExplanation: checkbox.checked,
        });

        storage.set(
          {
            sites: sites,
          },
          catchError()
        );
        // delete the parent element of the button, which is the div.siteContainer
        b.target.parentElement.remove();
        addSiteContainer(sites, sites.length - 1, "exist");
      });
    }

    let checkboxLabel = document.createElement("label");
    checkboxLabel.innerHTML = "Use default explanation?";
    checkboxLabel.classList.add("checkboxLabel");

    siteContainer.appendChild(siteInput);
    siteContainer.appendChild(button);
    siteContainer.appendChild(defExpCheckBox);
    siteContainer.appendChild(checkboxLabel);
    $("#sitesContainer").appendChild(siteContainer);
  }

  function createDeleteButton() {
    // create a button with an X icon
    let deleteButton = document.createElement("button");
    deleteButton.innerHTML = "&#10006;";
    deleteButton.classList.add("deleteButton");
    return deleteButton;
  }

  function createAddButton() {
    // create a button with an X icon
    let addButton = document.createElement("button");
    addButton.innerHTML = "&#43;";
    addButton.classList.add("addButton");
    return addButton;
  }

  function setMultipleAttributes(element, attributes) {
    for (let key in attributes) {
      element.setAttribute(key, attributes[key]);
    }
  }
}).call(this);
