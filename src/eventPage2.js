// Generated by CoffeeScript 1.12.5
(function () {
  // initialize variables
  const DEFAULT_SITES = [
      {
        hostSuffix: "reddit.com",
        useDefaultExplanation: true,
        explanation: "Productivity",
      },
      {
        hostSuffix: "news.ycombinator.com",
        useDefaultExplanation: true,
        explanation: "Productivity",
      },
      {
        hostSuffix: "facebook.com",
        useDefaultExplanation: true,
        explanation: "Productivity",
      },
      {
        hostSuffix: "twitter.com",
        useDefaultExplanation: true,
        explanation: "Productivity",
      },
      {
        hostSuffix: "mako.co.il",
        useDefaultExplanation: true,
        explanation: "Distraction",
      },
    ],
    urlRegex = /^(([^:\/?#]+):)?(\/\/([^\/:?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;

  let storage = chrome.storage.sync,
    cooldown = 5,
    filter = {
      url: DEFAULT_SITES.map((site) => ({ hostSuffix: site.hostSuffix })),
    };

  /* The listener is where most of the action happens. This code fires on page navigate and is where we inject the content script.
     At this point filtering has already happened so we must be on one of the sites in our filter list. */
  let listener = function (event) {
    // Here we check that we are on the main frame, and not in some kind of an iframe.
    if (event.frameId > 0) {
      return;
    }

    return chrome.tabs.executeScript(event.tabId, {
      file: "src/content.js",
      runAt: "document_start",
    });
  };

  let tabReplacedListener = function (event) {
    return chrome.tabs.get(event.tabId, function (tab) {
      //
      let currentTabUrlBroken = urlRegex.exec(tab.url);
      let domain =
        currentTabUrlBroken != null ? currentTabUrlBroken[4] : undefined;

      // if we couldn't find the domain then we stop running the function.
      if (!domain) {
        return;
      }

      let sitesToPopupOn = filter.url;
      for (let i = 0; i < sitesToPopupOn.length; i++) {
        let siteToPopupOn = sitesToPopupOn[i];
        if (domain.match(new RegExp(siteToPopupOn.hostSuffix + "$"))) {
          return listener(event);
        }
      }
    });
  };

  let msgListener = function (msg) {
    if (msg !== "clicked") {
      return;
    }
    // if we got the clicked message then we stop to listen, so no more dialog will appear
    unlisten();
    // and we set an alarm to turn it back on again after the cooldown time.
    return chrome.alarms.create({
      delayInMinutes: cooldown,
    });
  };

  // listen to events
  let listen = function () {
    chrome.alarms.clearAll();
    // this will trigger the listener function only if the commited URL is one of the list inside the filter
    chrome.webNavigation.onCommitted.addListener(listener, filter);
    chrome.webNavigation.onTabReplaced.addListener(tabReplacedListener);
    // listen to messages from the content.js
    return chrome.runtime.onMessage.addListener(msgListener);
  };

  // listen to events (when we already presented our dialog...)
  let unlisten = function () {
    chrome.webNavigation.onCommitted.removeListener(listener);
    chrome.webNavigation.onTabReplaced.removeListener(tabReplacedListener);
    return chrome.runtime.onMessage.removeListener(msgListener);
  };

  // triggered when on chrome.storage.onChanged (when the storage is changed, meaning the customer changed his preferences)
  let reload = function () {
    return storage.get(["sites", "cooldown"], function (result) {
      if (!result) {
        return;
      }
      if (Array.isArray(result.sites)) {
        filter = {
          url: result.sites,
        };
      }
      if (result.cooldown) {
        cooldown = result.cooldown;
      }
      unlisten();
      return listen();
    });
  };

  storage.get(["sites", "cooldown"], function (result) {
    if (!result) {
      return;
    }

    // if we have results for the sites, we should assign them to the filter.
    //if not we should push the default values to the storage
    if (Array.isArray(result.sites)) {
      filter = {
        url: result.sites.map((site) => ({
          hostSuffix: site.hostSuffix,
        })),
      };
    } else {
      storage.set({
        sites: DEFAULT_SITES,
      });
    }

    // Same for cooldown
    if (result.cooldown) {
      cooldown = result.cooldown;
    } else {
      storage.set({
        cooldown: 5,
      });
    }
    return chrome.alarms.get(function (alarm) {
      if (!alarm) {
        return listen();
      }
    });
  });

  // Only start listening if we haven't deliberately removed our listeners (because we're waiting for the alarm to turn them back on).
  chrome.alarms.onAlarm.addListener(listen);
  chrome.storage.onChanged.addListener(reload);
}).call(this);
