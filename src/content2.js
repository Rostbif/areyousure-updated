// Generated by CoffeeScript 1.12.5
(function () {
  if (document.getElementById("areyousure")) {
    return;
  }

  const CONTENT = `
    <button hidden>\n  
      <svg xmlns="http://www.w3.org/2000/svg" version="1.1"\n    viewBox="0 0 240 240">\n\n 
        <filter id="areyousure-dropshadow" height="130%">\n      
          <feGaussianBlur in="SourceAlpha" stdDeviation="2"/>\n       
          <feOffset dx="2" dy="0" result="offsetblur"/>\n       
          <feComponentTransfer>\n       
          <feFuncA type="linear" slope="0.5"/>\n  
          </feComponentTransfer>\n   
          <feMerge>\n        
          <feMergeNode/>\n       
          <feMergeNode in="SourceGraphic"/>\n       
          </feMerge>\n      
        </filter>\n\n   
        <circle id="areyousure-circle" cx="120" cy="120" r="100" style="filter:url(#areyousure-dropshadow)"/>\n 
        <text id="areyousure-text" x="120" y="120" font-size="24px"\n  
        fill="white" dominant-baseline="middle" text-anchor="middle">\n     
              Are you sure?\n   
        </text>\n 
      </svg>\n
  </button>
  <div id="explanationContainer"> 
    <div id="reminder" font-size="12px" style="font-weight:bold; margin-bottom: 2px">
    You wanted us to remind you that</div>
    <hr>
    <text id="explanation" font-size="18px"\n  
          fill="white" dominant-baseline="middle" text-anchor="middle">\n     
                Explanation?\n   
    </text>
  </div>\n `;
  let container = document.createElement("div");
  let shadow = container.attachShadow({
    mode: "open",
  });

  let dialog = document.createElement("dialog");
  shadow.resetStyleInheritance = true;
  dialog.style.background = "none";
  dialog.style.border = "none";
  dialog.style.display = "flex";
  dialog.style.flexDirection = "column";
  shadow.appendChild(dialog);

  // We are doing that to make sure all of our css changes are only for the ones that inside our dialog
  dialog.id = "areyousure";
  dialog.innerHTML = CONTENT;
  dialog.addEventListener("cancel", function (e) {
    return e.preventDefault();
  });

  document.documentElement.appendChild(container);

  dialog.showModal();

  let staticStyle = document.createElement("link");
  staticStyle.rel = "stylesheet";
  staticStyle.type = "text/css";
  staticStyle.href = chrome.runtime.getURL("src/content2.css");
  shadow.appendChild(staticStyle);

  let dynamicStyle = document.createElement("style");
  shadow.appendChild(dynamicStyle);

  let setStyles = function (arg) {
    let holdTime = arg.holdTime;
    let backdropOpacity = arg.backdropOpacity;
    dynamicStyle.textContent =
      "#areyousure button:active circle {\n  transition: stroke-dashoffset " +
      holdTime +
      "s linear !important;\n}\n\n#areyousure::backdrop {\n  background-color: rgba(0,0,0," +
      backdropOpacity +
      ");\n}";

    return dynamicStyle.textContent;
  };

  let timer = null;
  let completed = false;
  let button = dialog.querySelector("button");
  let textElements = dialog.querySelectorAll("text");
  let buttonText = textElements[0];
  let explanation = textElements[1];

  chrome.storage.sync.get(
    {
      holdTime: 2,
      backdropOpacity: 0.8,
      defaultExplanation: "Default",
      sites: [],
    },
    function (opts) {
      setStyles(opts);

      let site = opts.sites.find(
        (s) => "www." + s.hostSuffix == window.location.hostname
      );

      // if (site && site.useDefaultExplanation) {
      // // get the current tab domain name
      // explanation.textContent = site.explanation;
      // }

      explanation.textContent = site.useDefaultExplanation
        ? opts.defaultExplanation
        : site.explanation;

      let start = function (ev) {
        if (!(ev.button === 0 || ev.code === "Space")) {
          return;
        }

        if (timer || completed) {
          return;
        }

        timer = setTimeout(function () {
          completed = true;
          return button.classList.add("completed");
        }, opts.holdTime * 1000);

        return timer;
      };

      let stop = function (ev) {
        if (!(ev.button === 0 || ev.code === "Space")) {
          return;
        }

        if (!timer) {
          return;
        }

        clearTimeout(timer);

        timer = null;
        return button.classList.remove("activated");
      };

      button.addEventListener("blur", function () {
        return button.focus();
      });

      button.addEventListener("mousedown", start);
      window.addEventListener("mouseup", stop);
      button.addEventListener("keydown", start);
      window.addEventListener("keyup", stop);

      return button.addEventListener("click", function (e) {
        // if not completed
        if (!completed) {
          return e.preventDefault();
        }

        // if completed
        window.removeEventListener("mouseup", stop);
        window.removeEventListener("keyup", stop);
        dialog.close();
        container.remove();

        // inform the background process that the button was clicked and completed.
        return chrome.runtime.sendMessage("clicked");
      });
    }
  );

  chrome.runtime.onMessage.addListener(function (msg) {
    console.log(msg);
    if (msg.explanation) {
      // explanation.textContent = msg.explanation;
      console.log("Message reached!!" + msg.explanation);
    }
  });
}).call(this);
